<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player_Idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize player
WEIGHT = 0.01;
MAX_SIZE = 4;
ANIMATION_SPEED = 1 / 8;
BASE_MAX_JUMP = 20;
BASE_MIN_JUMP = 5;
BASE_JUMP_CHARGE = 0.2;
BASE_SPEED = 2;
image_speed = 0;
alarm[0] = room_speed * 3;

state = player_state_fall;
velX = 0;
velY = 0;
swapBlock = false;

//Size relatives
size = 0;
jumpCharge = 0;
jumpMin = 0;
jumpMax = 0;
mSpeed = 0;
phySize = 0;
player_resize(2);

//Bridge platforms
bridge = -1;

instance_create(x, y, PlayerCam);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cooldown look
if (state == player_state_idle) {
    //Select animation randomly
    var roll = irandom_range(1, 4);
    if (roll &lt;= 1) {
        sprite_index = spr_Player_Idle2;
    }
    else {
        sprite_index = spr_Player_Idle;
    }
    
    //Start animation
    image_index = 1;
    image_speed = ANIMATION_SPEED;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle global player events
if (keyboard_check_pressed(vk_tab)) {
    player_swap();
}

if (keyboard_check_pressed(ord("W"))) {
    player_split();
}

if (keyboard_check_pressed(ord("S"))) {
    player_absorb();
}

if (size == 4) {
    notify_show(
        "You reached the maximal size!#"
        + "You move much slower, but you can make platforms!#"
        + "Walk off an edge to stretch out.",
    10, "FIRST_GROW", false, true);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute state
script_execute(state);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Platform_Dummy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enter bridge fix
if (bridge == -1) {
    //show_debug_message(string(y) + " / " + string(other.y));
    var toMe = sign(other.x - x);
    if (y &gt; other.y + 32 &amp;&amp; velY == 0 &amp;&amp; sign(velX) == toMe) {
        velY -= jumpMin;
        state = player_state_fall;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dead
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw self

//Moving
var dir = sign(velX);
if (dir == 0) { dir = 1; }

if (sprite_index == spr_Player_Bridge) {
    if (image_speed &lt; 0) {
        //Removing the bridge
        dir *= -1;
    }
}

//Draw sprite in dir
draw_sprite_ext(sprite_index, image_index, x, y, phySize * dir, phySize, 0, c_white, 0.75);

//Draw jump prediction
if (state == player_state_jump) {
    var px = x - (-velX * max(velY, -velY) * 2);
    var py = y;
    if (velX == 0) {
        var py = y - (max(velY, -velY) * 12);
    }
    draw_circle_colour(px, py, 5, c_lime, c_lime, false);
    
    //Calc path
    //To do...
}

//Debug info
/*
draw_text(x, y - 40, ""
    //+ "#VelX: " + string(velX)
    //+ "#VelY: " + string(velY)
    //+ "#Block: " + string(swapBlock)
); */

//Draw platform collision points
/*
var SW = sprite_width * phySize;
var SXO = sprite_get_xoffset(sprite_index) * phySize;
var PW = (sprite_get_width(spr_Platform_Cave) / 3) * (2 - phySize);
var leftX = x - PW;
var rightX = x + PW;
var yOff = y + 1;

draw_point_colour(leftX, yOff, c_red);
draw_point_colour(x, yOff, c_red);
draw_point_colour(rightX, yOff, c_red); */

///draw wall collosion (dir)
var dir = sign(velX);

var SW = sprite_width * phySize;
var SH = sprite_height * phySize;
var ground = player_platform();

var hw = SW / 2;
var hh = SH / 3;
var SOY = sprite_get_yoffset(sprite_index) * phySize;
var x1 = x + (hw * dir) + (dir * 1);
var y1 = y - SOY + (hh / 2);
var y2 = y1 + hh;
if (ground) {
    y2 = min(y2, ground.y);
}

draw_point_colour(x1, y2, c_red);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
