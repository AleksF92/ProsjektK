<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Cooler</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>HeavyItem</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize cooler
event_inherited();

heater = noone;
TIME = 3;
RANGE = 32;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Explosion timeout
var distX = (heater.x - x) / 2;
var distY = (heater.y - y) / 2;
var boom = instance_create(x + distX, y + distY - 32, Effect);
boom.type = "Explosion";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Event handling
event_inherited();

//Check for heaters
//if (mouse_check_button_released(mb_left)) {
    if (!held &amp;&amp; heater == noone) {
        heater = instance_nearest(x, y, Heater);
        if (distance_to_object(heater) &lt;= RANGE) {
            //In range for explosion
            if (!alarm[0]) {
                alarm[0] = room_speed * TIME;
            }
        }
        else {
            heater = noone;
        }
    }
    
    if (held) {
        heater = noone;
        alarm[0] = 0;
    }
    
    if (heater != noone) {
        if (heater.held) {
            heater = noone;
            alarm[0] = 0;
        }
    }
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw self + selection
if (held) { draw_set_alpha(0.5); }
draw_sprite(sprite_index, 0, x, y);
draw_set_alpha(1);

//Draw selection
event_inherited();

//Draw timeout
if (alarm[0]) {
    var time = string(ceil(alarm[0] / room_speed));
    var w = string_width(time);
    var h = string_height(time);
    var distX = (heater.x - x) / 2;
    var distY = (heater.y - y) / 2;
    var x1 = x + distX;
    var y1 = y + distY - 32;
    var col1 = c_black;
    var col2 = c_white;
    draw_rectangle_colour(x1 - (h / 2), y1 - (h / 2), x1 + (h / 2), y1 + (h / 2), col1, col1, col1, col1, false);
    draw_set_valign(fa_middle);
    draw_set_halign(fa_center);
        draw_text_colour(x1, y1, time, col2, col2, col2, col2, 1);
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
