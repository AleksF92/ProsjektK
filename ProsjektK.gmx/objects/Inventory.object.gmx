<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize inventory
enum ITEM {
    SWORD,
    POTION,
    ORE_COPPER, ORE_MITHRIL,
    TOME_FIRE, TOME_WATER, TOME_EARTH, TOME_AIR,
    STICK
};

enum FRAME { NORMAL, FOCUS, ACTIVE };
enum INFO { NAME, MAX_STACK };
WIDTH = 4;
HEIGHT = 3;
SIZE = sprite_get_width(spr_ItemFrame);
OFFSET = 4;

TOTAL_W = (SIZE + OFFSET) * WIDTH;
TOTAL_H = (SIZE + OFFSET) * HEIGHT;

//Create empty inventory
iId = ds_grid_create(WIDTH, HEIGHT);
iCount = ds_grid_create(WIDTH, HEIGHT);
iInfo = ds_list_create();
iFocusX = -1;
iFocusY = -1;
iActiveX = -1;
iActiveY = -1;

for (var yy = 0; yy &lt; HEIGHT; yy++) {
    for (var xx = 0; xx &lt; WIDTH; xx++) {
        ds_grid_clear(iId, -1);
        ds_grid_clear(iCount, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy inventory
ds_grid_destroy(iId);
ds_grid_destroy(iCount);
ds_list_destroy(iInfo);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle mouse events
if (visible) {
    if (tag_completed("NOTIFY_INVENTORY", true)) {
        notify_show("Your items can be used to make puzzle objects."
            + "#Press [C] to open/close your crafting window."
        , Main.NOTIFY_TIME, "NOTIFY_CRAFTING", false, true);
    }

    iFocusX = inventory_x_to_gx(mouse_x);
    iFocusY = inventory_y_to_gy(mouse_y);
    
    if (mouse_check_button_pressed(mb_left)) {
        iActiveX = iFocusX;
        iActiveY = iFocusY;
    }
    else if (mouse_check_button_released(mb_left)) {
        if (iActiveX &gt; -1 &amp;&amp; iActiveY &gt; -1) {
            if (iFocusX == -1 || iFocusY == -1) {
                inventory_item_drop(iActiveX, iActiveY);
            }
            else if (iFocusX == iActiveX &amp;&amp; iFocusY == iActiveY) {
                inventory_item_use(iFocusX, iFocusY);
            }
            else if (iFocusX &gt; -1 &amp;&amp; iFocusY &gt; -1) {
                inventory_item_swap(iActiveX, iActiveY, iFocusX, iFocusY);
            }
        }
        iActiveX = -1;
        iActiveY = -1;
    }
}
else {
    if (!inventory_empty()) {
        notify_show("You picked up an item."
            + "#Press [I] to open/close your inventory."
        , Main.NOTIFY_TIME, "NOTIFY_INVENTORY", false, true);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw inventory

//Draw all items
for (var yy = 0; yy &lt; HEIGHT; yy++) {
    for (var xx = 0; xx &lt; WIDTH; xx++) {
        var tx = x + ((SIZE + OFFSET) * xx);
        var ty = y + ((SIZE + OFFSET) * yy);
        
        //Draw quality color
        var colQuality = c_white;
        draw_rectangle_colour(tx, ty, tx + SIZE - 1, ty + SIZE - 1, colQuality, colQuality, colQuality, colQuality, false);
        
        //Draw item
        if (iId[# xx, yy] &gt; -1) {
            draw_sprite(spr_Items, iId[# xx, yy], tx, ty);
        }
        
        //Draw frame
        var frame = FRAME.NORMAL;
        if (xx == iFocusX &amp;&amp; yy == iFocusY) { frame = FRAME.FOCUS; }
        if (xx == iActiveX &amp;&amp; yy == iActiveY) { frame = FRAME.ACTIVE; }
        draw_sprite(spr_ItemFrame, frame, tx, ty);
        
        //Draw count
        if (iCount[# xx, yy] &gt; 1) {
            var c1 = c_black;
            var c2 = c_white;
            var txt = string(iCount[# xx, yy]);
            var size = string_height(txt) - 6;
            var x1 = tx - (size / 2);
            var y1 = ty - (size / 2);
            draw_rectangle_colour(x1, y1, x1 + size + 1, y1 + size, c1, c1, c1, c1, false);
            draw_set_valign(fa_middle);
            draw_set_halign(fa_center);
                draw_text_colour(x1 + (size / 2) + 1, y1 + (size / 2) - 1, txt, c2, c2, c2, c2, 1);
            draw_set_valign(fa_top);
            draw_set_halign(fa_left);
        }
    }
}

//Draw tooltip on top
for (var yy = 0; yy &lt; HEIGHT; yy++) {
    for (var xx = 0; xx &lt; WIDTH; xx++) {
        var tx = x + ((SIZE + OFFSET) * xx);
        var ty = y + ((SIZE + OFFSET) * yy);
        
        //Draw tooltip
        if (iId[# xx, yy] &gt; -1) {
            if (xx == iFocusX &amp;&amp; yy == iFocusY) {
                inventory_item_info(iId[# xx, yy]);
                var txt = Inventory.iInfo[| INFO.NAME];
                var w = string_width(txt);
                var h = string_height(txt);
                var x1 = (tx + (SIZE / 2)) - (w / 2);
                var y1 = ty + SIZE;
                var c1 = c_black;
                var c2 = c_white;
                draw_rectangle_colour(x1, y1, x1 + w + 1, y1 + h, c1, c1, c1, c1, false);
                draw_set_valign(fa_middle);
                draw_set_halign(fa_center);
                    draw_text_colour(x1 + (w / 2) + 1, y1 + (h / 2) - 1, txt, c2, c2, c2, c2, 1);
                draw_set_valign(fa_top);
                draw_set_halign(fa_left);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
