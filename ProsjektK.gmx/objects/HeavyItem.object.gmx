<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>ActionObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize heavy item
event_inherited();

//Carried?
held = false;

phySize = 1;
velX = 0;
velY = 0;
state = object_state_fall;
target = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle events
event_inherited();

if (held) {
    //Events while held
    selected = false;
    
    //Follow player
    var offY = 8;
    if (target.sprite_index == spr_Player_Jumping) {
        switch (floor(target.image_index)) {
            case 1: { offY = 0; break; }
            case 2: { offY = 32; break; }
            case 3: { offY = 16; break; }
        }
    }
    offY *= target.phySize;
    var DELAY = 1;
    var distX = target.x - x;
    var distY = (target.y - offY) - y;
    x += distX / DELAY;
    y += distY / DELAY;

    if (mouse_check_button_released(mb_left) || target.size &lt; 2) {
        if (target == Player) {
            //Drop item
            held = false;
            target = noone;
            state = object_state_fall;
        }
    }
}
else {
    //Gravity
    script_execute(state);
    
    if (selected &amp;&amp; inReach) {
        //Mouseover and in range
        if (Player.size &gt;= 2) {
            //Events while on ground
            if (mouse_check_button_released(mb_left)) {
                //Drop other held items
                with (HeavyItem) {
                    if (held &amp;&amp; target == Player) {
                        //Drop item
                        held = false;
                        target = noone;
                        state = object_state_fall;
                    }
                }
            
                held = true;
                target = Player;
                state = object_state_idle;
            }
        }
    }
    
    if (selected &amp;&amp; Player.size &lt; 2) {
        //Too small to hold
        inReach = false;
        notify_show(
            "You are too small to hold this object!",
        Main.NOTIFY_TIME, "TOO_SMALL", false, true);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
