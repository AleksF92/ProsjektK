<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100000000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize main

//Enter fullscreen
window_set_fullscreen(true);
display_set_gui_size(view_wview[0], view_hview[0]);
draw_set_font(fnt_Main);
randomize();

//Create menu
instance_create(0, 0, Menu);
Menu.visible = true;

//Create text display
instance_create(0, 0, TextDisplay);

//Create inventory in center
instance_create(0, 0, Inventory);
var cx = display_get_gui_width() / 2;
var cy = display_get_gui_height() / 2;
Inventory.x = cx - (Inventory.TOTAL_W / 2);
Inventory.y = cy - (Inventory.TOTAL_H / 2);

//Create crafting
instance_create(0, 0, Crafting);

//Create notification
NOTIFY_TIME = 5;
tags = ds_map_create();
instance_create(0, 0, Notification);

//Create trigger vars
triggers = ds_map_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Global input handling
if (room != rom_Main) {
    if (keyboard_check_pressed(vk_escape)) {
        room_goto(rom_Main);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load the room

//Hide current menu
Menu.visible = false;

//Load appropriate room
switch (room) {
    case rom_Main: {
        //Reset variables
        Notification.visible = false;
        Menu.visible = true;
        break;
    }
    case rom_Level1: {
        //Clear map variables
        ds_map_clear(tags);
        ds_map_clear(triggers);
        
        //Welcome message
        notify_show(
            "Press [A] and [D] to move.",
        NOTIFY_TIME, "WELCOME", false, true);
        break;
    }
    case rom_Level2: {
        //Clear map variables
        tags[? "TOO_SMALL"] = false;
        tags[? "MAGICAL_ROCK"] = false;
        triggers[? "P2_DOOR"] = false;
        break;
    }
    case rom_Level3: {
        //Clear map variables
        tags[? "WARM_ROCK"] = false;
        tags[? "COLD_ROCK"] = false;
        triggers[? "P2_DOOR1_BOTTOM"] = false;
        triggers[? "P2_DOOR1_TOP"] = false;
        triggers[? "P2_DOOR2"] = false;
        triggers[? "P2_DOOR3"] = false;
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw depth background
if (room != rom_Main) {
    var bg = -1;
    switch(room) {
        //case rom_Level1: { bg = bg_Cave; break; }
        default: { bg = bg_Cave; break; }
    }
    
    //Draw background
    var x1 = -32 + (view_xview[0] / 10);
    var y1 = -32 + (view_yview[0] / 10);
    draw_background(bg, x1, y1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
