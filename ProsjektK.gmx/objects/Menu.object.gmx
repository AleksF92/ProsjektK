<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize the menu
menuList = ds_list_create();

//Create list for all rooms
for (var i = 0; i &lt;= room_last; i++) {
    //Create lists
    var menu = ds_list_create();
    ds_list_add(menuList, menu);

    //Add content
    var content = -1;
    switch(i) {
        case rom_Main: {
            content = ds_list_create();
            ds_list_add(menu, content);
            ds_list_add(content, "BUTTON"); //Type
            ds_list_add(content, "Start game"); //Text
            ds_list_add(content, -1); //X
            ds_list_add(content, -1); //Y
            ds_list_add(content, 0); //Status
            
            content = ds_list_create();
            ds_list_add(menu, content);
            ds_list_add(content, "BUTTON"); //Type
            ds_list_add(content, "Controls"); //Text
            ds_list_add(content, -1); //X
            ds_list_add(content, -1); //Y
            ds_list_add(content, 0); //Status
            
            //Add spacer
            content = ds_list_create();
            ds_list_add(menu, content);
        
            content = ds_list_create();
            ds_list_add(menu, content);
            ds_list_add(content, "BUTTON"); //Type
            ds_list_add(content, "Change Log"); //Text
            ds_list_add(content, -1); //X
            ds_list_add(content, -1); //Y
            ds_list_add(content, 0); //Status
            
            content = ds_list_create();
            ds_list_add(menu, content);
            ds_list_add(content, "BUTTON"); //Type
            ds_list_add(content, "Credits"); //Text
            ds_list_add(content, -1); //X
            ds_list_add(content, -1); //Y
            ds_list_add(content, 0); //Status
            
            content = ds_list_create();
            ds_list_add(menu, content);
            ds_list_add(content, "BUTTON"); //Type
            ds_list_add(content, "Objective"); //Text
            ds_list_add(content, -1); //X
            ds_list_add(content, -1); //Y
            ds_list_add(content, 0); //Status
            
            //Add spacer
            content = ds_list_create();
            ds_list_add(menu, content);
            
            content = ds_list_create();
            ds_list_add(menu, content);
            ds_list_add(content, "BUTTON"); //Type
            ds_list_add(content, "Exit game"); //Text
            ds_list_add(content, -1); //X
            ds_list_add(content, -1); //Y
            ds_list_add(content, 0); //Status
            
            content = ds_list_create();
            ds_list_add(menu, content);
            ds_list_add(content, "TEXT"); //Type
            ds_list_add(content, "The Blob - Alpha v0.4"); //Text
            ds_list_add(content, 10); //X
            ds_list_add(content, 5); //Y
            
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw all buttons in room
if (visible) {
    var menu = menuList[| room];
    
    for (var c = 0; c &lt; ds_list_size(menu); c++) {
        var content = menu[| c];
        var cType = content[| 0];
        switch (cType) {
            case "BUTTON": {
                //Retrive the rest of the data
                var cText = content[| 1];
                var cX = content[| 2];
                var cY = content[| 3];
                var cStatus = content[| 4];
                
                //Other data
                var W = sprite_get_width(spr_Menu_Button);
                var H = sprite_get_height(spr_Menu_Button);
                
                //Check for mouse events
                cStatus = 0;
                if (mouse_x &gt;= cX &amp;&amp; mouse_x &lt;= cX + W) {
                    if (mouse_y &gt;= cY &amp;&amp; mouse_y &lt;= cY + H) {
                        if (mouse_check_button_released(mb_left)) {
                            //Mouse clicked
                            menu_click_button(cText);
                            cStatus = 0;
                        }
                        else if (mouse_check_button(mb_left)) {
                            //Mouse held
                            cStatus = 1;
                        }
                        else {
                            //Mouse inside
                            cStatus = 2;
                        }
                    }
                }
                content[| 4] = cStatus;
                break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw all buttons in room
var menu = menuList[| room];

for (var c = 0; c &lt; ds_list_size(menu); c++) {
    var content = menu[| c];
    var cType = content[| 0];
    switch (cType) {
        case "BUTTON": {
            //Retrive the rest of the data
            var cText = content[| 1];
            var cX = content[| 2];
            var cY = content[| 3];
            var cStatus = content[| 4];
            
            //Other data
            var W = sprite_get_width(spr_Menu_Button);
            var H = sprite_get_height(spr_Menu_Button);
            var a = 0.75;
            
            //Prepare data
            if (cX == -1) {
                //Default x: center
                cX = (view_wview[0] / 2) - (W / 2);
                content[| 2] = cX;
            }
            if (cY == -1) {
                //Default y: auto height
                cY = H + (H * 1.25 * c);
                content[| 3] = cY;
            }
            if (cStatus != 0) {
                //Mouse inside
                a = 1;
                
                if (cStatus == 2) { cStatus = 0; }
            }
            
            //Draw button
            var prev_a = draw_get_alpha();
            draw_set_alpha(a);
            draw_sprite(spr_Menu_Button, cStatus, cX, cY);
            draw_set_halign(fa_center);
            draw_set_valign(fa_middle);
                draw_text(cX + (W / 2), cY + (H / 2) - 2, cText);
            draw_set_halign(fa_top);
            draw_set_valign(fa_left);
            draw_set_alpha(prev_a);
            
            break;
        }
        case "TEXT": {
            //Retrive the rest of the data
            var cText = content[| 1];
            var cX = content[| 2];
            var cY = content[| 3];
            
            //Prepare data
            if (cX == -1) {
                //Default x: center
                cX = (view_wview[0] / 2) - (W / 2);
                content[| 2] = cX;
            }
            if (cY == -1) {
                //Default y: auto height
                cY = H + (H * 1.25 * c);
                content[| 3] = cY;
            }
            
            //Draw button
            draw_text(cX, cY, cText);
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
